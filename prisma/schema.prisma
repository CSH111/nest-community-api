generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?   @db.VarChar(50)
  email         String?   @db.VarChar(50)
  provider      String?   @db.VarChar(50)
  provider_id   String?   @db.VarChar(50)
  created_at    DateTime? @default(now()) @db.DateTime(0)
  updated_at    DateTime? @default(now()) @db.DateTime(0)

  refresh_tokens RefreshToken[]
  posts          Post[]
  comments       Comment[]

  @@unique([provider, provider_id], map: "provider_provider_id")
  @@map("users")
}

model RefreshToken {
  id            String   @id @default(cuid())
  token_hash    String   @db.VarChar(255)
  user_id       Int
  device_id     String   @db.VarChar(255)
  device_name   String?  @db.VarChar(100)
  device_type   String?  @db.VarChar(50)
  user_agent    String?  @db.Text
  ip_address    String?  @db.VarChar(45)
  last_used_at  DateTime @default(now()) @db.DateTime(0)
  expires_at    DateTime @db.DateTime(0)
  created_at    DateTime @default(now()) @db.DateTime(0)
  is_active     Boolean  @default(true)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([token_hash])
  @@index([user_id])
  @@index([expires_at])
  @@map("refresh_tokens")
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(200)
  content     String    @db.Text
  author_id   Int
  view_count  Int       @default(0)
  is_pinned   Boolean   @default(false)
  created_at  DateTime  @default(now()) @db.DateTime(0)
  updated_at  DateTime  @default(now()) @updatedAt @db.DateTime(0)

  author   User      @relation(fields: [author_id], references: [id], onDelete: Cascade)
  comments Comment[]

  @@index([author_id])
  @@index([created_at])
  @@index([is_pinned])
  @@map("posts")
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String   @db.Text
  post_id    Int
  author_id  Int
  parent_id  Int?
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @updatedAt @db.DateTime(0)

  post     Post      @relation(fields: [post_id], references: [id], onDelete: Cascade)
  author   User      @relation(fields: [author_id], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentReplies", fields: [parent_id], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")

  @@index([post_id])
  @@index([author_id])
  @@index([parent_id])
  @@index([created_at])
  @@map("comments")
}
